{"/home/travis/build/npmtest/node-npmtest-metalsmith/test.js":"/* istanbul instrument in package npmtest_metalsmith */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-metalsmith/lib.npmtest_metalsmith.js":"/* istanbul instrument in package npmtest_metalsmith */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_metalsmith = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_metalsmith = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-metalsmith/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-metalsmith && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_metalsmith */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_metalsmith\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_metalsmith.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_metalsmith.rollup.js'] =\n            local.assetsDict['/assets.npmtest_metalsmith.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_metalsmith.__dirname + '/lib.npmtest_metalsmith.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-metalsmith/node_modules/metalsmith/index.js":"\n/**\n * Export `Metalsmith`.\n */\n\nmodule.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-metalsmith/node_modules/metalsmith/lib/index.js":"\nvar absolute = require('absolute');\nvar assert = require('assert');\nvar clone = require('clone');\nvar fs = require('co-fs-extra');\nvar is = require('is');\nvar matter = require('gray-matter');\nvar Mode = require('stat-mode');\nvar path = require('path');\nvar readdir = require('recursive-readdir');\nvar rm = require('rimraf');\nvar thunkify = require('thunkify');\nvar unyield = require('unyield');\nvar utf8 = require('is-utf8');\nvar Ware = require('ware');\n\n/**\n * Thunks.\n */\n\nreaddir = thunkify(readdir);\nrm = thunkify(rm);\n\n/**\n * Export `Metalsmith`.\n */\n\nmodule.exports = Metalsmith;\n\n/**\n * Initialize a new `Metalsmith` builder with a working `directory`.\n *\n * @param {String} directory\n */\n\nfunction Metalsmith(directory){\n  if (!(this instanceof Metalsmith)) return new Metalsmith(directory);\n  assert(directory, 'You must pass a working directory path.');\n  this.plugins = [];\n  this.ignores = [];\n  this.directory(directory);\n  this.metadata({});\n  this.source('src');\n  this.destination('build');\n  this.concurrency(Infinity);\n  this.clean(true);\n  this.frontmatter(true);\n}\n\n/**\n * Add a `plugin` function to the stack.\n *\n * @param {Function or Array} plugin\n * @return {Metalsmith}\n */\n\nMetalsmith.prototype.use = function(plugin){\n  this.plugins.push(plugin);\n  return this;\n};\n\n/**\n * Get or set the working `directory`.\n *\n * @param {Object} directory\n * @return {Object or Metalsmith}\n */\n\nMetalsmith.prototype.directory = function(directory){\n  if (!arguments.length) return path.resolve(this._directory);\n  assert(is.string(directory), 'You must pass a directory path string.');\n  this._directory = directory;\n  return this;\n};\n\n/**\n * Get or set the global `metadata` to pass to templates.\n *\n * @param {Object} metadata\n * @return {Object or Metalsmith}\n */\n\nMetalsmith.prototype.metadata = function(metadata){\n  if (!arguments.length) return this._metadata;\n  assert(is.object(metadata), 'You must pass a metadata object.');\n  this._metadata = clone(metadata);\n  return this;\n};\n\n/**\n * Get or set the source directory.\n *\n * @param {String} path\n * @return {String or Metalsmith}\n */\n\nMetalsmith.prototype.source = function(path){\n  if (!arguments.length) return this.path(this._source);\n  assert(is.string(path), 'You must pass a source path string.');\n  this._source = path;\n  return this;\n};\n\n/**\n * Get or set the destination directory.\n *\n * @param {String} path\n * @return {String or Metalsmith}\n */\n\nMetalsmith.prototype.destination = function(path){\n  if (!arguments.length) return this.path(this._destination);\n  assert(is.string(path), 'You must pass a destination path string.');\n  this._destination = path;\n  return this;\n};\n\n/**\n * Get or set the maximum number of files to open at once.\n *\n * @param {Number} max\n * @return {Number or Metalsmith}\n */\n\nMetalsmith.prototype.concurrency = function(max){\n  if (!arguments.length) return this._concurrency;\n  assert(is.number(max), 'You must pass a number for concurrency.');\n  this._concurrency = max;\n  return this;\n};\n\n/**\n * Get or set whether the destination directory will be removed before writing.\n *\n * @param {Boolean} clean\n * @return {Boolean or Metalsmith}\n */\nMetalsmith.prototype.clean = function(clean){\n  if (!arguments.length) return this._clean;\n  assert(is.boolean(clean), 'You must pass a boolean.');\n  this._clean = clean;\n  return this;\n};\n\n/**\n * Optionally turn off frontmatter parsing.\n *\n * @param {Boolean} frontmatter\n * @return {Boolean or Metalsmith}\n */\n\nMetalsmith.prototype.frontmatter = function(frontmatter){\n  if (!arguments.length) return this._frontmatter;\n  assert(is.boolean(frontmatter), 'You must pass a boolean.');\n  this._frontmatter = frontmatter;\n  return this;\n};\n\n/**\n * Add a file or files to the list of ignores.\n *\n * @param {String or Strings} The names of files or directories to ignore.\n * @return {Metalsmith}\n */\nMetalsmith.prototype.ignore = function(files){\n  if (!arguments.length) return this.ignores.slice();\n  this.ignores = this.ignores.concat(files);\n  return this;\n};\n\n/**\n * Resolve `paths` relative to the root directory.\n *\n * @param {String} paths...\n * @return {String}\n */\n\nMetalsmith.prototype.path = function(){\n  var paths = [].slice.call(arguments);\n  paths.unshift(this.directory());\n  return path.resolve.apply(path, paths);\n};\n\n/**\n * Build with the current settings to the destination directory.\n *\n * @return {Object}\n */\n\nMetalsmith.prototype.build = unyield(function*(){\n  var clean = this.clean();\n  var dest = this.destination();\n  if (clean) yield rm(path.join(dest, '*'));\n\n  var files = yield this.process();\n  yield this.write(files);\n  return files;\n});\n\n/**\n * Process files through plugins without writing out files.\n *\n * @return {Object}\n */\n\nMetalsmith.prototype.process = unyield(function*(){\n  var files = yield this.read();\n  files = yield this.run(files);\n  return files;\n});\n\n/**\n * Run a set of `files` through the plugins stack.\n *\n * @param {Object} files\n * @param {Array} plugins\n * @return {Object}\n */\n\nMetalsmith.prototype.run = unyield(function*(files, plugins){\n  var ware = new Ware(plugins || this.plugins);\n  var run = thunkify(ware.run.bind(ware));\n  var res = yield run(files, this);\n  return res[0];\n});\n\n/**\n * Read a dictionary of files from a `dir`, parsing frontmatter. If no directory\n * is provided, it will default to the source directory.\n *\n * @param {String} dir (optional)\n * @return {Object}\n */\n\nMetalsmith.prototype.read = unyield(function*(dir){\n  dir = dir || this.source();\n  var read = this.readFile.bind(this);\n  var concurrency = this.concurrency();\n  var ignores = this.ignores || null;\n  var paths = yield readdir(dir, ignores);\n  var files = [];\n  var complete = 0;\n  var batch;\n\n  while (complete < paths.length) {\n    batch = paths.slice(complete, complete + concurrency);\n    batch = yield batch.map(read);\n    files = files.concat(batch);\n    complete += concurrency;\n  }\n\n  return paths.reduce(memoizer, {});\n\n  function memoizer(memo, file, i) {\n    file = path.relative(dir, file);\n    memo[file] = files[i];\n    return memo;\n  }\n});\n\n/**\n * Read a `file` by path. If the path is not absolute, it will be resolved\n * relative to the source directory.\n *\n * @param {String} file\n * @return {Object}\n */\n\nMetalsmith.prototype.readFile = unyield(function*(file){\n  var src = this.source();\n  var ret = {};\n\n  if (!absolute(file)) file = path.resolve(src, file);\n\n  try {\n    var frontmatter = this.frontmatter();\n    var stats = yield fs.stat(file);\n    var buffer = yield fs.readFile(file);\n    var parsed;\n\n    if (frontmatter && utf8(buffer)) {\n      try {\n        parsed = matter(buffer.toString());\n      } catch (e) {\n        var err = new Error('Invalid frontmatter in the file at: ' + file);\n        err.code = 'invalid_frontmatter';\n        throw err;\n      }\n\n      ret = parsed.data;\n      ret.contents = new Buffer(parsed.content);\n    } else {\n      ret.contents = buffer;\n    }\n\n    ret.mode = Mode(stats).toOctal();\n    ret.stats = stats;\n  } catch (e) {\n    if (e.code == 'invalid_frontmatter') throw e;\n    e.message = 'Failed to read the file at: ' + file + '\\n\\n' + e.message;\n    e.code = 'failed_read';\n    throw e;\n  }\n\n  return ret;\n});\n\n/**\n * Write a dictionary of `files` to a destination `dir`. If no directory is\n * provided, it will default to the destination directory.\n *\n * @param {Object} files\n * @param {String} dir (optional)\n */\n\nMetalsmith.prototype.write = unyield(function*(files, dir){\n  dir = dir || this.destination();\n  var write = this.writeFile.bind(this);\n  var concurrency = this.concurrency();\n  var keys = Object.keys(files);\n  var complete = 0;\n  var batch;\n\n  while (complete < keys.length) {\n    batch = keys.slice(complete, complete + concurrency);\n    yield batch.map(writer);\n    complete += concurrency;\n  }\n\n  function writer(key){\n    var file = path.resolve(dir, key);\n    return write(file, files[key]);\n  }\n});\n\n/**\n * Write a `file` by path with `data`. If the path is not absolute, it will be\n * resolved relative to the destination directory.\n *\n * @param {String} file\n * @param {Object} data\n */\n\nMetalsmith.prototype.writeFile = unyield(function*(file, data){\n  var dest = this.destination();\n  if (!absolute(file)) file = path.resolve(dest, file);\n\n  try {\n    yield fs.outputFile(file, data.contents);\n    if (data.mode) yield fs.chmod(file, data.mode);\n  } catch (e) {\n    e.message = 'Failed to write the file at: ' + file + '\\n\\n' + e.message;\n    throw e;\n  }\n});\n"}